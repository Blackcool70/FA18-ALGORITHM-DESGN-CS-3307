import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * @author Jecasn Blanco
 * @version 1.0
 * @since 10-14-2018
 * WTAMU
 * 2018FA ALGORITHM DESGN/ANAL (CS-3307-01)
 * Extra Credit Assignment
 */
public class RSA {

    private static final String encodeKey = " ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String WELL_MSG = "\nWell... you are not suppose to see this... maybe I did something wrong... or maybe you?\n";

    /**
     * A key structure use to store the keypair generated by the program
     */
    public static class Key {
        private final int ed, N;

        Key(int ed, int N) {
            assert  ed > 0 && N > 0;
            this.ed = ed;
            this.N = N;
        }
        public String toString() {
            return "(" + ed + "," + N + ")";

        }

    }
    private  static int gcd(int n, int m){
        if(m == 0) {
            return n;
        }else {
            return gcd(m, n % m);
        }
    }
    private  static boolean areCoPrime(int n, int m){
        return  gcd(n,m) == 1;

    }

    /**
     * Assumes p,q are co-prime and e co-prime to phi and N
     *
     * @param p non negative prime int
     * @param q non negative prime int
     * @param d a non negative prime co-prime to phi and N (gcd(e,phi) && gcd(e,N) == 1)
     * @return private public key pair
     */
    private static Key[] getKeys(int p, int q, int d) {
        assert  p > 0 && q > 0 && d > 0;
        if(!(areCoPrime(p,q) && areCoPrime(p*q,d))){
            System.err.println("Non co-prime numbers were given.\nProgram aborting.");
            System.exit((1));
        }
        //how many co-primes there are for p and q
        int phi = (p - 1) * (q - 1);
        //gets the value used for decryption
        int e = extendedEuclidean(phi, d)[1];
        while (e < 0) {
            e += phi;
        }
        int N = p * q;
        return new Key[]{new Key(e, N), new Key(d, N)};
    }

    private static int[] decrypt(Key key, int[] message) {
        return encrypt(key, message);
    }

    /**
     * Encrypts  an encoded message that is up to 6 characters
     *
     * @param key            Key object sed to encrypt or de-crypt a message
     * @param encodedMessage a 6 character message encoded using the encode function
     * @return an encrypted message
     */
    private static int[] encrypt(Key key, int[] encodedMessage) {
        assert key != null && key.ed > 0 && encodedMessage != null && encodedMessage.length > 0;
        char[] binary = java.lang.Integer.toBinaryString(key.ed).toCharArray();
        int[] encryptedMessage = new int[encodedMessage.length];
        int i = 0;
        for (int number : encodedMessage) {
            int encrypted_number = 1;
            // m = char^e mod N
            for (char bit : binary) {
                if (bit == '1') {
                    encrypted_number = ((((encrypted_number * encrypted_number) % key.N) * number) % key.N);
                } else {
                    encrypted_number = (encrypted_number * encrypted_number) % key.N;

                }
            }
            encryptedMessage[i++] = encrypted_number;
        }

//        System.out.println("Encrypted:");
//        for(int j : encrypted){
//            System.out.printf("%d ",j);
//        }
//        System.out.println();

        return encryptedMessage;

    }


    /**
     * Decodes a message encoded by encode function
     *
     * @param encodedMessage an encoded message
     * @return a decoded message
     */
    private static String decode(int[] encodedMessage) {
        assert encodedMessage != null && encodedMessage.length > 0;
        StringBuilder sb = new StringBuilder();
        for (int numbers : encodedMessage) {
            //System.out.printf("Number: %s", numbers);
            sb.append(encodeKey.charAt(numbers / 100)).append(encodeKey.charAt(numbers % 100));
        }
        return sb.toString();
    }

    /**
     * Maps 2 characters in to  1 integers ( per requirements )
     *
     * @param message the message to encode
     * @return an array of encoded characters
     */
    private static int[] encode(String message) {
//        System.out.printf("Message: %s\n", message);
        assert message != null && message.length() > 0;
        message = message.toUpperCase();
        int[] encoded = new int[3];
        int j = -1;
        for (int i = 0; i < encoded.length; ++i) {
            encoded[i] = encodeKey.indexOf(message.charAt(++j)) * 100; // first
            encoded[i] += encodeKey.indexOf(message.charAt(++j));  // second
        }

//        System.out.println("Encoded:");
//        for(int i : encoded){
//            System.out.printf("%d ",i);
//        }
        System.out.println();
        return encoded;
    }

    /**
     * Returns the multiplicative inverse of n and m
     *
     * @param n a positive integer
     * @param m a nonnative integer m
     * @return the greatest common divisor gcd of n and m,
     * and integers  [0]=i and [1]=j such that gcd = in + jm
     */
    private static int[] extendedEuclidean(int n, int m) {
        assert  n > 0 ;
        System.out.printf("[%-10d,%+10d]\n", n, m);
        if (m == 0) {
            System.out.printf("[%-10d,%+10d]\n", 1, 0);
            return new int[]{1, 0};
        } else {
            int[] oldVals = extendedEuclidean(m, n % m);
            int oldI = oldVals[0];
            int oldJ = oldVals[1];

            oldVals[0] = oldJ;
            oldVals[1] = oldI - Math.floorDiv(n, m) * oldJ;

             System.out.printf("[%-10d,%+10d]\n", oldVals[0], oldVals[1]);
            return oldVals;
        }
    }

    /**
     * Encryption Menu ...
     */
    private static void decryptionMenu() {
        System.out.println("[Encryption Menu]");
        BufferedReader reader =
                new BufferedReader(new InputStreamReader(System.in));
        try {
            System.out.println("Enter your d:");
            int d = Integer.parseInt(reader.readLine());

            System.out.println("Enter your N:");
            int N = Integer.parseInt(reader.readLine());

            System.out.println("Enter your encrypted message separated by spaces:");
            String message = reader.readLine();
            int[] parsedMessage = parseToInts(message);

            int[] decrypted = decrypt(new Key(d, N), parsedMessage);
            System.out.printf("Encoded Decrypted: %s\n",print(decrypted));
            System.out.println("Decrypted: " + decode(decrypted));
            System.out.println("Press [ENTER] to continue...");
            reader.readLine();
        } catch (IOException e) {
            System.err.println(WELL_MSG);
            System.err.println(e);
        }
    }

    /**
     * Breaks a string of numbers by spaces into an array of INTS.
     * @param message  a string of numbers
     * @return a array of integers corresponding to the string numbers
     */
    private static int[] parseToInts(String message) {
        assert message != null && message.length() > 0;

        String strNumbers[] = message.trim().split(" ");
        int numbers[] = new int[strNumbers.length];
        int i = 0;
        for(String num: strNumbers){
            numbers[i++] = Integer.parseInt(num);
        }
        return  numbers;
    }

    private static void encryptionMenu() {
        System.out.println("[Encryption Menu]");
        BufferedReader reader =
                new BufferedReader(new InputStreamReader(System.in));
        try {
            System.out.println("Enter your e:");
            int e = Integer.parseInt(reader.readLine());

            System.out.println("Enter your N:");
            int N = Integer.parseInt(reader.readLine());

            System.out.println("Enter your message: ( only accepts a-zA-Z and space)");
            String message = reader.readLine();

            int[] encrypted = encrypt(new Key(e, N), encode(message));

            System.out.println("Message: " + message);
            System.out.println("Encrypted: " + print(encrypted));
            System.out.println("Press [ENTER] to continue...");
            reader.readLine();
        } catch (IOException e) {
            System.err.println(WELL_MSG);
            System.err.println(e);
        }
    }

    private static String print(int[] message) {
        StringBuilder sb = new StringBuilder();
        for (int i : message) {
            sb.append(String.format("%04d",i)).append(" ");
        }
        return sb.toString();
    }

    public static void main(String[] args) {
        BufferedReader reader =
                new BufferedReader(new InputStreamReader(System.in));
        char selection = ' ';
        try {
            while (true) {
//                System.out.println("TESTING ----------------");
//                System.out.printf("GCD( 71,41_ = %d",gcd(71,41));
//                System.out.printf("coprime?( 32,54) = %b",areCoPrime(71,41));
//                System.out.println();
//                System.out.println("TESTING ----------------");

                System.out.println("Welcome the Encryptonator v2.0 (copyright Allsafe Inc)");
                System.out.println("This program only works if correct input is provided and messages are less than 6 chars.");
                System.out.println("only A-Za-z and space are valid chars");
                System.out.println();
                System.out.println("x ) Demo Mode");
                System.out.println("0 ) Get key pair");
                System.out.println("1 ) Encrypt a message");
                System.out.println("2 ) Decrypt a message");
                System.out.println("3 ) Quit");
                System.out.print(">");
                String input = reader.readLine().toLowerCase();
                if(input.length() != 0)
                    selection = input.charAt(0);
                switch (selection) {
                    case 'x':
                        demoMenu();
                        break;
                    case '0':
                        keypairMenu();
                        break;
                    case '1':
                        encryptionMenu();
                        break;
                    case '2':
                        decryptionMenu();
                        break;
                    case '3':
                        System.out.println("Goodbye!");
                        return;
                    default:
                        System.out.println("Not sure what that is!");
                }


            }
        } catch ( Exception e) {
            System.err.println(WELL_MSG);
            System.err.println(e);
        }



    }

    private static void demoMenu() {
        System.out.println("[DEMO MENU]");
        int p = 71;
        int q = 41;
        int d = 81;


        String message = "HURRAH";
        System.out.printf("Using: p=%d q=%d d=%s\n",p,q,d);
        System.out.printf("φ=%s , N:%s\n",(p-1)*(q-1),p*q);
        Key keys[] = getKeys(p,q,d);
        System.out.printf("Encrypt key:%s \nDecrypt key:%s\n",keys[0],keys[1]);
        System.out.printf("Encrypting: %s\n",message);
        System.out.printf("Encoded: %s\n", print(encode(message)));
        int encrypted[] = encrypt(keys[0],encode(message));
        System.out.printf("Encrypted: %s\n\n",print(encrypted));

        System.out.printf("Decrypting: %s\n",print(encrypted));
        int decrypted[] = decrypt(keys[1],encrypted);
        System.out.printf("Encoded: %s\n", print(decrypted));
        System.out.printf("Decrypted: %s\n\n",decode(decrypted));
        System.out.println("------------------------------------");

        encrypted = new int[]{2117,1257,444};
        System.out.printf("Decrypting(Ibsa Provided): %s\n",print(encrypted));
        decrypted = decrypt(keys[1],encrypted);
        System.out.printf("Encoded: %s\n", print(decrypted));
        System.out.printf("Decrypted: %s\n\n",decode(decrypted));


        try{
            System.out.println("Press [ENTER] to continue...");
            System.in.read();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static void keypairMenu() {

        BufferedReader reader =
                new BufferedReader(new InputStreamReader(System.in));
        try {
            System.out.println("[Keypair Menu]");
            System.out.println("(This assumes that your q p are co-prime and d is co-prime to p*q)");
            System.out.println("Enter your p:");
            int p = Integer.parseInt(reader.readLine());
            System.out.println("Enter your q:");
            int q = Integer.parseInt(reader.readLine());
            System.out.println("Enter your d:");
            int d = Integer.parseInt(reader.readLine());
            Key keys[] = getKeys(p, q, d);
            System.out.printf("Public Key: %s\nPrivate key: %s\n", keys[0], keys[1]);
            System.out.println("Press [ENTER] to continue...");
            reader.readLine();

        } catch (IOException e) {
            System.err.println(WELL_MSG);
            System.err.println(e);
        }

    }
}
